---
import { Icon } from "astro-icon/components";

import { siteMetadata } from "~/constants";
import { openSourceLibs } from "~/icons/icons";
import Hero from "../components/Hero.astro";
import Layout from "../layouts/Layout.astro";
import SectionRow from "../layouts/SectionRow.astro";
import Manifesto from "~/sections/Manifesto.astro";
---

<Layout title={siteMetadata.description}>
  <main>
    <Hero />

    <SectionRow title="Meme Driven Development Manifesto" anchor="manifesto">
      <section>
        <p>
          We are uncovering better ways of developing software by creating and
          sharing memes. Through this work, we have come to value:
        </p>

        <ul>
          <li>
            <strong>Memes over Documentation</strong><br />
            That is, while there is value in comprehensive documentation, we value
            the creativity and engagement that memes bring more.
          </li>

          <li>
            <strong>Humor over Formality</strong><br />
            That is, while formal communication has its place, we find that humor
            fosters a more collaborative and enjoyable environment.
          </li>

          <li>
            <strong>Visual Feedback over Textual Feedback</strong><br />
            That is, while textual feedback is useful, we believe that visual feedback
            through memes is more impactful and memorable.
          </li>

          <li>
            <strong>Team Spirit over Individual Effort</strong><br />
            That is, while individual contributions are important, we prioritize
            the collective spirit and camaraderie that memes help build.
          </li>
        </ul>

        <h2>Principles behind the Meme Driven Development Manifesto</h2>

        <ol>
          <li>
            Our highest priority is to satisfy the team through early and
            continuous delivery of memes.
          </li>
          <li>
            Welcome changing memes, even late in development. Memes harness
            change for the team's advantage.
          </li>
          <li>
            Deliver memes frequently, from a couple of times a day to a couple
            of times a week, with a preference to the shorter timescale.
          </li>
          <li>
            Business people and developers must work together daily throughout
            the project, sharing and enjoying memes.
          </li>
          <li>
            Build projects around motivated individuals. Give them the
            environment and support they need, and trust them to create great
            memes.
          </li>
          <li>
            The most efficient and effective method of conveying information to
            and within a development team is face-to-face conversation,
            supplemented by memes.
          </li>
          <li>Memes are the primary measure of progress.</li>
          <li>
            Meme Driven Development promotes sustainable development. The
            sponsors, developers, and users should be able to maintain a
            constant pace indefinitely.
          </li>
          <li>
            Continuous attention to meme quality and meme design enhances
            agility.
          </li>
          <li>
            Simplicity‚Äîthe art of maximizing the amount of meme not done‚Äîis
            essential.
          </li>
          <li>The best memes emerge from self-organizing teams.</li>
          <li>
            At regular intervals, the team reflects on how to become more
            effective, then tunes and adjusts its meme creation and sharing
            accordingly.
          </li>
        </ol>
      </section>
    </SectionRow>

    <SectionRow
      title="Meme Driven Development Specification"
      anchor="specification"
      isDark
    >
      <section>
        <h2>Introduction</h2>
        <p>
          Meme Driven Development (MDD) is a novel approach to software
          development derived from Test Driven Development (TDD). In MDD,
          developers are required to create and share memes before writing any
          code. Additionally, feedback on pull requests and other forms of
          communication must be delivered in meme form. This specification
          outlines the conventions and practices for adopting MDD in a
          development workflow.
        </p>

        <h2>Specification</h2>

        <h3>1. Meme Creation</h3>
        <ul>
          <li>
            <strong>Purpose</strong>: Memes should encapsulate the essence of
            the task or problem at hand.
          </li>
          <li>
            <strong>Format</strong>: Memes can be in the form of images, GIFs,
            or short videos.
          </li>
          <li>
            <strong>Content</strong>: Memes must be relevant, respectful, and
            adhere to company policies on appropriate content.
          </li>
        </ul>

        <h3>2. Meme Before Code</h3>
        <ul>
          <li>
            <strong>Requirement</strong>: Before any coding begins, a meme must
            be created and shared with the team.
          </li>
          <li>
            <strong>Approval</strong>: The meme must receive at least one
            thumbs-up (üëç) from a team member to proceed with coding.
          </li>
          <li>
            <strong>Documentation</strong>: The meme should be documented in the
            project management tool alongside the task description.
          </li>
        </ul>

        <h3>3. Meme Feedback on Pull Requests</h3>
        <ul>
          <li>
            <strong>Submission</strong>: All feedback on pull requests must be
            provided in meme form.
          </li>
          <li>
            <strong>Clarity</strong>: Memes should clearly convey the feedback,
            whether it is approval, a request for changes, or highlighting an
            issue.
          </li>
          <li>
            <strong>Constructiveness</strong>: Memes must be constructive and
            aim to improve the code quality and team morale.
          </li>
        </ul>

        <h3>4. Meme Communication</h3>
        <ul>
          <li>
            <strong>Daily Stand-ups</strong>: Memes can be used to summarize
            daily updates or blockers.
          </li>
          <li>
            <strong>Sprint Reviews</strong>: Memes should be used to highlight
            key achievements and areas for improvement.
          </li>
          <li>
            <strong>Retrospectives</strong>: Memes can be employed to reflect on
            the sprint and suggest actionable improvements.
          </li>
        </ul>

        <h3>5. Tools and Platforms</h3>
        <ul>
          <li>
            <strong>Meme Creation Tools</strong>: Recommended tools include Meme
            Generator, Giphy, and Canva.
          </li>
          <li>
            <strong>Communication Platforms</strong>: Memes should be shared via
            Slack, Microsoft Teams, or the project management tool in use.
          </li>
        </ul>

        <h3>6. Compliance and Monitoring</h3>
        <ul>
          <li>
            <strong>Adherence</strong>: All team members must adhere to the MDD
            practices.
          </li>
          <li>
            <strong>Monitoring</strong>: Regular audits should be conducted to
            ensure memes are being used appropriately and effectively.
          </li>
          <li>
            <strong>Feedback</strong>: Continuous feedback on the MDD process
            should be encouraged to refine and improve the practice.
          </li>
        </ul>

        <h2>Conclusion</h2>
        <p>
          Meme Driven Development aims to foster a creative and engaging
          environment for software development. By integrating humor and visual
          communication, MDD enhances team collaboration and makes the
          development process more enjoyable.
        </p>
      </section>
    </SectionRow>

    <SectionRow title="Best Practices" anchor="best-practices">
      <section>
        <div class="meme-gallery">
          <div class="meme">
            <h3>Before Coding</h3>
            <img
              src="https://i.imgflip.com/1ur9b0.jpg"
              alt="Distracted Boyfriend Meme"
            />
            <p class="caption">
              Developer looking at "New Feature" while ignoring "Existing Bugs".
            </p>
          </div>

          <div class="meme">
            <h3>Pull Request Feedback</h3>
            <img
              src="https://i.imgflip.com/30b1gx.jpg"
              alt="Drake Hotline Bling Meme"
            />
            <p class="caption">
              Drake rejecting "Messy Code" and approving "Clean, Refactored
              Code".
            </p>
          </div>

          <div class="meme">
            <h3>Daily Stand-up</h3>
            <img src="https://i.imgflip.com/1bhw.jpg" alt="Success Kid Meme" />
            <p class="caption">"Finally fixed that bug!"</p>
          </div>

          <div class="meme">
            <h3>Sprint Review</h3>
            <img
              src="https://i.imgflip.com/2wifvo.jpg"
              alt="Leonardo DiCaprio Cheers Meme"
            />
            <p class="caption">"To a successful deployment!"</p>
          </div>

          <div class="meme">
            <h3>Retrospective</h3>
            <img src="https://i.imgflip.com/1bij.jpg" alt="This is Fine Meme" />
            <p class="caption">
              "When the sprint starts smoothly but ends in chaos".
            </p>
          </div>
        </div>
      </section>
    </SectionRow>

    <SectionRow
      title="Free & Open Source."
      description="<p>Meme-Driven Development is based on Astro, Tailwind CSS and more awesome open source libraries.</p><br /><p>Written in Typescript.</p>"
      isDark
    >
      <div class="flex flex-wrap justify-center md:max-w-lg mt-12 lg:mt-0">
        {
          openSourceLibs.map((item) => (
            <div class="hover:bg-gray-200 p-2 m-2 rounded-lg">
              <a href={item.link} target="_blank" rel="noopener noreferrer">
                <Icon
                  name={item.svg}
                  title={item.name}
                  size={32}
                  class="w-8 sm:w-12"
                />
              </a>
            </div>
          ))
        }
      </div>
    </SectionRow>
  </main>
</Layout>
